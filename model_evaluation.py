# -*- coding: utf-8 -*-
"""model_evaluation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rw9VCWxpiQ_i60WAnLqxLxQ6H-K44YGM


"""# Data"""

import pandas as pd
import numpy as np
from numpy import load
import matplotlib.pyplot as plt

data = pd.read_csv("product_images.csv").to_numpy()

our_labels=load('labels.npy')

X_tsne=load('X_tsne.npy')

X=load('X.npy')

X_pca=load('X_pca.npy')

true_labels = pd.read_csv("true_label.csv").to_numpy()
true_labels = np.array([each[0] for each in true_labels])

np.unique(our_labels)

np.unique(true_labels)

"""# Cluster plots"""

legend = ["tshirt/top", "trousers", "pullover", "dress", "coat", "sandal", "shirt", "sneaker", "bag", "ankleboots"]

# our clusters
x_vals = [each[0] for each in X_tsne]
y_vals = [each[1] for each in X_tsne]

plt.figure(figsize=(20,10))

for k in np.unique(our_labels):
    x_vals = [X_tsne[i][0] for i in range(len(X_tsne)) if our_labels[i]==k]
    y_vals = [X_tsne[i][1] for i in range(len(X_tsne)) if our_labels[i]==k]
    plt.scatter(x_vals , y_vals, label = k)
plt.legend()
plt.show()

# true clusters

x_vals = [each[0] for each in X_tsne]
y_vals = [each[1] for each in X_tsne]

plt.figure(figsize=(20,10))

for k in np.unique(true_labels):
    x_vals = [X_tsne[i][0] for i in range(len(X_tsne)) if true_labels[i]==k]
    y_vals = [X_tsne[i][1] for i in range(len(X_tsne)) if true_labels[i]==k]
    plt.scatter(x_vals , y_vals, label = f"{k}-{legend[k]}")
plt.legend()
plt.show()

"""# Evaluation Metrics"""

from sklearn.cluster import MiniBatchKMeans
from sklearn.metrics import silhouette_score
from sklearn.metrics.cluster import homogeneity_score, completeness_score

"""K-means with t-SNE feature extraction"""

n=10

def get_scores(n, data, true_labels):
  kmeans = MiniBatchKMeans(n_clusters = n, init="k-means++", random_state=999)
  kmeans.fit(data)
  s_score=silhouette_score(X_tsne, kmeans.labels_)
  h_score=homogeneity_score(true_labels, kmeans.labels_)
  c_score=completeness_score(true_labels, kmeans.labels_)
  return [n, round(s_score, 5), round(h_score, 5), round(c_score, 5)]

scores_tsne=[get_scores(n, X_tsne, true_labels) for n in range (7,11)]

pd.DataFrame(scores_tsne, columns=["n", "s_score", "h_score", "c_score"])

"""K-means with PCA """

scores_pca=[get_scores(n, X_pca, true_labels) for n in range (7,11)]

pd.DataFrame(scores_pca, columns=["n", "s_score", "h_score", "c_score"])

"""K-means without feature extraction"""

scores_allfeatures=[get_scores(n, X, true_labels) for n in range (7,11)]

pd.DataFrame(scores_allfeatures, columns=["n", "s_score", "h_score", "c_score"])

"""# Count proportion of true labels in each of our labels"""

labels_df=pd.DataFrame(
    dict(
        our_labels=our_labels,
         true_labels=true_labels
    )
)

df = pd.DataFrame(
    dict(
        true_labels=list(set(true_labels))
    ),
    index=list(set(true_labels))
)

for n in list(set(our_labels)):
  counts = labels_df[labels_df["our_labels"]==n].groupby("true_labels").count().rename(columns={"our_labels":n})
  df = df.merge(counts, on="true_labels", how="outer")

df=df.drop(columns=["true_labels"])
df.fillna(0)
df_pct = df/df[df.columns].sum()*100
df_pct = df_pct.fillna(0).round(2)

df_pct["legend"] = legend

df_pct





i = 1

fig, axs = plt.subplots(2,4, figsize=(23,10))

n_counter=0

for x in range(2):
  for y in range(4):
    vals = df_pct[n_counter].values
    axs[x,y].pie(vals, labels = legend)
    axs[x,y].set_title(f"Generated cluster {n_counter}")
    n_counter+=1

fig.show()